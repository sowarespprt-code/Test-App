[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-22 17:24:48.888921",
  "module": "Helpdesk",
  "name": "Customer code entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Customer",
  "script": "\n@frappe.whitelist()\ndef run():\n    doctype = frappe.form_dict.get('doctype')\n    txt = frappe.form_dict.get('txt', '')\n    searchfield = frappe.form_dict.get('searchfield')\n    start = frappe.form_dict.get('start', 0)\n    page_len = frappe.form_dict.get('page_len', 10)\n    filters = frappe.parse_json(frappe.form_dict.get('filters', '{}'))\n\n    field = filters.get('field') if filters else None\n    if field == 'custom_customercode':\n        return frappe.db.sql(\"\"\"\n            SELECT custom_customercode, name\n            FROM `tabHD Customer`\n            WHERE custom_customercode LIKE %s\n            ORDER BY custom_customercode\n            LIMIT %s OFFSET %s\n        \"\"\", (\"%\" + txt + \"%\", page_len, start))\n    elif field == 'custom_customer_name':\n        return frappe.db.sql(\"\"\"\n            SELECT customer_name, name\n            FROM `tabHD Customer`\n            WHERE customer_name LIKE %s\n            ORDER BY customer_name\n            LIMIT %s OFFSET %s\n        \"\"\", (\"%\" + txt + \"%\", page_len, start))\n    return []",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-23 11:26:13.798862",
  "module": "Helpdesk",
  "name": "get_customer_options",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "txt = frappe.form_dict.get('txt', '')\nfield = frappe.form_dict.get('field', '')\npage_length = frappe.form_dict.get('page_length', 20)\n\nresults = []\n\nif field == 'custom_customercode':\n    results = frappe.db.sql(\"\"\"\n        SELECT custom_customercode as value, \n               custom_customercode as description\n        FROM `tabHD Customer`\n        WHERE custom_customercode LIKE %(txt)s\n        ORDER BY custom_customercode\n        LIMIT %(page_length)s\n    \"\"\", {\n        'txt': '%' + txt + '%',\n        'page_length': page_length\n    }, as_dict=1)\n    \nelif field == 'custom_customer_name':\n    results = frappe.db.sql(\"\"\"\n        SELECT name as value, \n               customer_name as description\n        FROM `tabHD Customer`\n        WHERE customer_name LIKE %(txt)s\n        ORDER BY customer_name\n        LIMIT %(page_length)s\n    \"\"\", {\n        'txt': '%' + txt + '%',\n        'page_length': page_length\n    }, as_dict=1)\n\nfrappe.response['message'] = results",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-24 13:24:27.426747",
  "module": null,
  "name": "For Customer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Customer",
  "script": "if doc.has_value_changed('custom_customercode'):\n    # Get all tickets for this customer\n    tickets = frappe.get_all(\n        'HD Ticket',\n        filters={\n            'Customer': doc.name\n        },\n        fields=['name']\n    )\n    \n    # Update each ticket's custom_customercode field (in memory only)\n    for ticket in tickets:\n        # Get the ticket document\n        ticket_doc = frappe.get_doc('HD Ticket', ticket.name)\n        \n        # Update the custom_customercode field\n        ticket_doc.custom_customercode = doc.custom_customercode\n        \n        # Use db_set to update without triggering validations or workflows\n        # This will update the field value in memory/cache\n        frappe.db.set_value('HD Ticket', ticket.name, 'custom_customercode', doc.custom_customercode, update_modified=False)\n    \n    \n    frappe.msgprint(f'Updated Customer Code in {len(tickets)} ticket(s)', alert=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-24 13:24:03.707201",
  "module": "Helpdesk",
  "name": "For ticket",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Ticket",
  "script": "if doc.has_value_changed('custom_customercode'):\n    tickets = frappe.get_all(\n        'HD Ticket',\n        filters={'customer': doc.name},\n        fields=['name']\n    )\n    \n    # Clear the cache for these tickets so they fetch fresh data\n    for ticket in tickets:\n        frappe.clear_cache(doctype='HD Ticket', name=ticket.name)\n    \n    if tickets:\n        frappe.msgprint(f'Customer Code updated. {len(tickets)} ticket(s) will reflect this change.', alert=True)\n\n\n# ====================\n# SERVER SCRIPT - HD TICKET (Before Load)\n# ====================\n# Create a separate server script on \"HD Ticket\" with \"Before Load\" event\n# This will populate custom_customercode from the linked customer\n\nif doc.customer:\n    customer_code = frappe.db.get_value('Customer', doc.customer, 'custom_customercode')\n    if customer_code:\n        doc.custom_customercode = customer_code\n\n\n# ====================\n# OPTIONAL: SERVER SCRIPT - HD TICKET (Before Save)\n# ====================\n# If you want to populate it before saving (for validation purposes)\n\nif doc.customer and not doc.custom_customercode:\n    customer_code = frappe.db.get_value('Customer', doc.customer, 'custom_customercode')\n    if customer_code:\n        doc.custom_customercode = customer_code",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-27 13:01:41.830474",
  "module": "Helpdesk",
  "name": "Before insert sees customer code",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Ticket",
  "script": "if doc.customer:\n    customer_code = frappe.db.get_value('Customer', doc.customer, 'custom_customercode')\n    if customer_code:\n        doc.custom_customercode = customer_code",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-27 13:01:47.364592",
  "module": "Helpdesk",
  "name": "Customer code fetching",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Ticket",
  "script": "# Auto-fill custom_product based on customer selection\nif doc.custom_customer_name:\n    # Fetch the product name from HD Customer's custom_productname field\n    customer = frappe.get_doc(\"HD Customer\", doc.custom_customer_name)\n    if customer.custom_productname:\n        doc.custom_product = customer.custom_productname\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_ticket_virtual_fields",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-27 12:10:33.310210",
  "module": "Helpdesk",
  "name": "get_ticket_virtual_fields",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Ticket",
  "script": "# Auto-populate virtual fields after ticket creation\nif doc.custom_customer_name:\n    try:\n        # Get the customer document\n        customer = frappe.get_doc('HD Customer', doc.custom_customer_name)\n        \n        # Set customercode\n        if hasattr(customer, 'custom_customercode'):\n            doc.custom_customercode = customer.custom_customercode or ''\n        \n        # Set product\n        if hasattr(customer, 'custom_productname'):\n            doc.custom_product = customer.custom_productname or ''\n        \n        # Save without triggering validation\n        doc.save(ignore_permissions=True)\n        \n    except Exception as e:\n        frappe.log_error(f\"Error in HD Ticket auto-populate: {str(e)}\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-27 13:03:12.588800",
  "module": "Helpdesk",
  "name": "Populate HD Ticket Virtual Fields Before Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Customer",
  "script": "import frappe\n\ndef execute(doc, method):\n    \"\"\"\n    Update all related HD Tickets when Customer Code or Product changes\n    \"\"\"\n    # Check if custom_customercode or custom_productname has changed\n    if doc.has_value_changed('custom_customercode') or doc.has_value_changed('custom_productname'):\n        # Find all tickets linked to this customer\n        tickets = frappe.db.get_all(\n            'HD Ticket',\n            filters={'custom_customer': doc.name},\n            fields=['name', 'custom_customercode', 'custom_product']\n        )\n        \n        if tickets:\n            updated_count = 0\n            \n            # Update all related tickets\n            for ticket in tickets:\n                try:\n                    # Use db.set_value for faster bulk updates\n                    frappe.db.set_value(\n                        'HD Ticket',\n                        ticket.name,\n                        {\n                            'custom_customercode': doc.custom_customercode or '',\n                            'custom_product': doc.custom_productname or ''\n                        },\n                        update_modified=True\n                    )\n                    updated_count += 1\n                except Exception as e:\n                    frappe.log_error(f\"Error updating ticket {ticket.name}: {str(e)}\")\n            \n            # Commit the changes\n            frappe.db.commit()\n            \n            # Show success message\n            if updated_count > 0:\n                frappe.msgprint(\n                    msg=f'Successfully updated {updated_count} ticket(s) with new customer information',\n                    title='Tickets Updated',\n                    indicator='green',\n                    alert=True\n                )",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-29 12:40:35.298024",
  "module": "Helpdesk",
  "name": "Updating code and product field",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Customer",
  "script": "\ndef execute(doc, method):\n    \"\"\"\n    Update all related HD Tickets when Customer Code or Product changes\n    \"\"\"\n    \n    # CRITICAL DEBUG: Check exact values and types\n    frappe.log_error(\n        f\"\"\"\n        === HD CUSTOMER VALUES ===\n        Document Name: {doc.name}\n        Customer Code: '{doc.custom_customercode}' (type: {type(doc.custom_customercode)})\n        Product Name: '{doc.custom_productname}' (type: {type(doc.custom_productname)})\n        \n        === OLD VALUES (from DB) ===\n        Old Customer Code: '{doc.get_db_value('custom_customercode')}'\n        Old Product: '{doc.get_db_value('custom_productname')}'\n        \n        === CHANGE DETECTION ===\n        Customer Code Changed: {doc.has_value_changed('custom_customercode')}\n        Product Changed: {doc.has_value_changed('custom_productname')}\n        \"\"\",\n        'HD Customer Debug - Exact Values'\n    )\n    \n    # Find related tickets and log their current values\n    tickets = frappe.db.get_all(\n        'HD Ticket',\n        filters={'custom_customer': doc.name},\n        fields=['name', 'custom_customercode', 'custom_product']\n    )\n    \n    if tickets:\n        for ticket in tickets:\n            frappe.log_error(\n                f\"\"\"\n                Ticket: {ticket.name}\n                Current CustomerCode in Ticket: '{ticket.custom_customercode}'\n                Current Product in Ticket: '{ticket.custom_product}'\n                \"\"\",\n                f'Ticket {ticket.name} Current Values'\n            )\n    \n    # Check if relevant fields changed\n    customercode_changed = doc.has_value_changed('custom_customercode')\n    product_changed = doc.has_value_changed('custom_productname')\n    \n    if not (customercode_changed or product_changed):\n        frappe.log_error('No changes detected - exiting', 'No Changes')\n        return\n    \n    frappe.log_error(\n        f'Changes detected! CustomerCode: {customercode_changed}, Product: {product_changed}',\n        'Changes Detected'\n    )\n    \n    if not tickets:\n        frappe.log_error('No tickets found', 'No Tickets')\n        return\n    \n    # Update tickets\n    updated_count = 0\n    for ticket in tickets:\n        try:\n            update_values = {}\n            \n            if customercode_changed:\n                update_values['custom_customercode'] = doc.custom_customercode or ''\n                frappe.log_error(\n                    f\"Will update customercode to: '{doc.custom_customercode}'\",\n                    f'Ticket {ticket.name} CustomerCode Update'\n                )\n            \n            if product_changed:\n                update_values['custom_product'] = doc.custom_productname or ''\n                frappe.log_error(\n                    f\"Will update product to: '{doc.custom_productname}'\",\n                    f'Ticket {ticket.name} Product Update'\n                )\n            \n            if update_values:\n                frappe.log_error(\n                    f'Updating ticket {ticket.name} with: {update_values}',\n                    'About to Update Ticket'\n                )\n                \n                frappe.db.set_value(\n                    'HD Ticket',\n                    ticket.name,\n                    update_values,\n                    update_modified=True\n                )\n                \n                # Verify the update\n                updated_ticket = frappe.db.get_value(\n                    'HD Ticket',\n                    ticket.name,\n                    ['custom_customercode', 'custom_product'],\n                    as_dict=True\n                )\n                \n                frappe.log_error(\n                    f\"\"\"\n                    After update verification:\n                    CustomerCode: '{updated_ticket.custom_customercode}'\n                    Product: '{updated_ticket.custom_product}'\n                    \"\"\",\n                    f'Ticket {ticket.name} After Update'\n                )\n                \n                updated_count += 1\n                \n        except Exception as e:\n            frappe.log_error(\n                f'Error updating ticket {ticket.name}: {str(e)}\\n{frappe.get_traceback()}',\n                'HD Ticket Update Error'\n            )\n    \n    \ndef execute(doc, method):\n    \"\"\"\n    Update all related HD Tickets when Customer Code or Product changes\n    \"\"\"\n    \n    # CRITICAL DEBUG: Check exact values and types\n    frappe.log_error(\n        f\"\"\"\n        === HD CUSTOMER VALUES ===\n        Document Name: {doc.name}\n        Customer Code: '{doc.custom_customercode}' (type: {type(doc.custom_customercode)})\n        Product Name: '{doc.custom_productname}' (type: {type(doc.custom_productname)})\n        \n        === OLD VALUES (from DB) ===\n        Old Customer Code: '{doc.get_db_value('custom_customercode')}'\n        Old Product: '{doc.get_db_value('custom_productname')}'\n        \n        === CHANGE DETECTION ===\n        Customer Code Changed: {doc.has_value_changed('custom_customercode')}\n        Product Changed: {doc.has_value_changed('custom_productname')}\n        \"\"\",\n        'HD Customer Debug - Exact Values'\n    )\n    \n    # Find related tickets and log their current values\n    tickets = frappe.db.get_all(\n        'HD Ticket',\n        filters={'custom_customer': doc.name},\n        fields=['name', 'custom_customercode', 'custom_product']\n    )\n    \n    if tickets:\n        for ticket in tickets:\n            frappe.log_error(\n                f\"\"\"\n                Ticket: {ticket.name}\n                Current CustomerCode in Ticket: '{ticket.custom_customercode}'\n                Current Product in Ticket: '{ticket.custom_product}'\n                \"\"\",\n                f'Ticket {ticket.name} Current Values'\n            )\n    \n    # Check if relevant fields changed\n    customercode_changed = doc.has_value_changed('custom_customercode')\n    product_changed = doc.has_value_changed('custom_productname')\n    \n    if not (customercode_changed or product_changed):\n        frappe.log_error('No changes detected - exiting', 'No Changes')\n        return\n    \n    frappe.log_error(\n        f'Changes detected! CustomerCode: {customercode_changed}, Product: {product_changed}',\n        'Changes Detected'\n    )\n    \n    if not tickets:\n        frappe.log_error('No tickets found', 'No Tickets')\n        return\n    \n    # Update tickets\n    updated_count = 0\n    for ticket in tickets:\n        try:\n            update_values = {}\n            \n            if customercode_changed:\n                update_values['custom_customercode'] = doc.custom_customercode or ''\n                frappe.log_error(\n                    f\"Will update customercode to: '{doc.custom_customercode}'\",\n                    f'Ticket {ticket.name} CustomerCode Update'\n                )\n            \n            if product_changed:\n                update_values['custom_product'] = doc.custom_productname or ''\n                frappe.log_error(\n                    f\"Will update product to: '{doc.custom_productname}'\",\n                    f'Ticket {ticket.name} Product Update'\n                )\n            \n            if update_values:\n                frappe.log_error(\n                    f'Updating ticket {ticket.name} with: {update_values}',\n                    'About to Update Ticket'\n                )\n                \n                frappe.db.set_value(\n                    'HD Ticket',\n                    ticket.name,\n                    update_values,\n                    update_modified=True\n                )\n                \n                # Verify the update\n                updated_ticket = frappe.db.get_value(\n                    'HD Ticket',\n                    ticket.name,\n                    ['custom_customercode', 'custom_product'],\n                    as_dict=True\n                )\n                \n                frappe.log_error(\n                    f\"\"\"\n                    After update verification:\n                    CustomerCode: '{updated_ticket.custom_customercode}'\n                    Product: '{updated_ticket.custom_product}'\n                    \"\"\",\n                    f'Ticket {ticket.name} After Update'\n                )\n                \n                updated_count += 1\n                \n        except Exception as e:\n            frappe.log_error(\n                f'Error updating ticket {ticket.name}: {str(e)}\\n{frappe.get_traceback()}',\n                'HD Ticket Update Error'\n            )\n    \n    frappe.db.commit()\n    \n    if updated_count > 0:\n        frappe.msgprint(\n            msg=f'Successfully updated {updated_count} ticket(s)',\n            title='Tickets Updated',\n            indicator='green',\n            alert=True\n        )\n\n    if updated_count > 0:\n        frappe.msgprint(\n            msg=f'Successfully updated {updated_count} ticket(s)',\n            title='Tickets Updated',\n            indicator='green',\n            alert=True\n        )\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_customer",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-28 14:43:19.964881",
  "module": "Helpdesk",
  "name": "update_customer",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "\ncustomer_name = frappe.form_dict.get('customer_name')\nupdates = frappe.form_dict.get('updates')\n\n# Validate inputs\nif not customer_name:\n    frappe.response['message'] = {\n        \"success\": False,\n        \"message\": \"Customer name is required\"\n    }\nelse:\n    try:\n        # Parse updates if it's a string\n        if type(updates).__name__ == 'str':  # Instead of isinstance()\n            updates = json.loads(updates)\n        \n        # Get the document\n        doc = frappe.get_doc(\"HD Customer\", customer_name)\n        \n        # Update fields - instead of hasattr, just try to set\n        for field, value in updates.items():\n            try:\n                doc.set(field, value)\n            except Exception:\n                # Field doesn't exist, skip it\n                continue\n        \n        # Save document (this triggers your document event script)\n        doc.save()\n        \n        frappe.response['message'] = {\n            \"success\": True,\n            \"message\": \"Customer updated successfully\"\n        }\n        \n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Customer Update Error\")\n        frappe.response['message'] = {\n            \"success\": False,\n            \"message\": str(e)\n        }\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-29 10:54:08.211666",
  "module": "Helpdesk",
  "name": "Team assign automatically",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "HD Ticket",
  "script": "if doc.custom_product:\n    team = frappe.db.get_value(\"Product\", doc.custom_product, \"team\")\n    if team:\n        doc.agent_group = team\n    else:\n        doc.agent_group = None\n",
  "script_type": "DocType Event"
 }
]